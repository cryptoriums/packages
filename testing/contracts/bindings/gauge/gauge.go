// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package gauge

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// GaugeMetaData contains all meta data concerning the Gauge contract.
var GaugeMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"original_balance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"original_supply\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"working_balance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"working_supply\",\"type\":\"uint256\"}],\"name\":\"UpdateLiquidityLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"CommitOwnership\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"ApplyOwnership\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"inputs\":[{\"name\":\"_lp_token\",\"type\":\"address\"},{\"name\":\"_admin\",\"type\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"gas\":288,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"gas\":4560,\"inputs\":[],\"name\":\"integrate_checkpoint\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"gas\":3123352,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"user_checkpoint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"gas\":3038594,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"claimable_tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"gas\":3006,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claimed_reward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"gas\":20225,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_reward_token\",\"type\":\"address\"}],\"name\":\"claimable_reward\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"gas\":35643,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"set_rewards_receiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim_rewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"claim_rewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"claim_rewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"gas\":3137443,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"kick\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_claim_rewards\",\"type\":\"bool\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_claim_rewards\",\"type\":\"bool\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"gas\":18062446,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"gas\":18100396,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"gas\":39421,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"gas\":41965,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_added_value\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"gas\":41989,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtracted_value\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"gas\":113003,\"inputs\":[{\"name\":\"_reward_token\",\"type\":\"address\"},{\"name\":\"_distributor\",\"type\":\"address\"}],\"name\":\"add_reward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"gas\":40753,\"inputs\":[{\"name\":\"_reward_token\",\"type\":\"address\"},{\"name\":\"_distributor\",\"type\":\"address\"}],\"name\":\"set_reward_distributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"gas\":1540169,\"inputs\":[{\"name\":\"_reward_token\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit_reward_token\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"gas\":38115,\"inputs\":[{\"name\":\"_is_killed\",\"type\":\"bool\"}],\"name\":\"set_killed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"gas\":40045,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"commit_transfer_ownership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"gas\":39990,\"inputs\":[],\"name\":\"accept_transfer_ownership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"gas\":3048,\"inputs\":[],\"name\":\"lp_token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"gas\":3078,\"inputs\":[],\"name\":\"future_epoch_time\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"gas\":3323,\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"gas\":3138,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"gas\":3598,\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"},{\"name\":\"arg1\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"gas\":13428,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"gas\":11181,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"gas\":3473,\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"name\":\"working_balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"gas\":3288,\"inputs\":[],\"name\":\"working_supply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"gas\":3318,\"inputs\":[],\"name\":\"period\",\"outputs\":[{\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"gas\":3393,\"inputs\":[{\"name\":\"arg0\",\"type\":\"uint256\"}],\"name\":\"period_timestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"gas\":3423,\"inputs\":[{\"name\":\"arg0\",\"type\":\"uint256\"}],\"name\":\"integrate_inv_supply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"gas\":3623,\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"name\":\"integrate_inv_supply_of\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"gas\":3653,\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"name\":\"integrate_checkpoint_of\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"gas\":3683,\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"name\":\"integrate_fraction\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"gas\":3498,\"inputs\":[],\"name\":\"inflation_rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"gas\":3528,\"inputs\":[],\"name\":\"reward_count\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"gas\":3603,\"inputs\":[{\"name\":\"arg0\",\"type\":\"uint256\"}],\"name\":\"reward_tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"gas\":15033,\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"name\":\"reward_data\",\"outputs\":[{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"distributor\",\"type\":\"address\"},{\"name\":\"period_finish\",\"type\":\"uint256\"},{\"name\":\"rate\",\"type\":\"uint256\"},{\"name\":\"last_update\",\"type\":\"uint256\"},{\"name\":\"integral\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"gas\":3833,\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"name\":\"rewards_receiver\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"gas\":4078,\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"},{\"name\":\"arg1\",\"type\":\"address\"}],\"name\":\"reward_integral_for\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"gas\":3678,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"gas\":3708,\"inputs\":[],\"name\":\"future_admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"gas\":3738,\"inputs\":[],\"name\":\"is_killed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x6040612f7a610140396020612f7a60c03960c05160a01c612f755760206020612f7a0160c03960c05160a01c612f755761014051600655610160516c02863c1f5cdae420000000002655606061024060046395d89b416101e0526101fc610140515afa15612f7557603f3d1115612f7557601b6102406102405101511015612f75576000506102608051602001806101808284600060045af115612f75575050600060096101e0527f43757276652e6669200000000000000000000000000000000000000000000000610200526101e06009806020846102a001018260208501600060045af1505080518201915050610180601a806020846102a001018260208501600060045af1505080518201915050600e610240527f204761756765204465706f73697400000000000000000000000000000000000061026052610240600e806020846102a001018260208501600060045af1505080518201915050806102a0526102a0905080600b602082510161012060006003818352015b8261012051602002111561018e576101b0565b61012051602002850151610120518501555b815160010180835281141561017b575b5050505050506000610180601a8060208461024001018260208501600060045af150508051820191505060066101e0527f2d67617567650000000000000000000000000000000000000000000000000000610200526101e060068060208461024001018260208501600060045af15050805182019150508061024052610240905080600f602082510161012060006002818352015b826101205160200211156102585761027a565b61012051602002850151610120518501555b8151600101808352811415610245575b5050505050504260155560206102406004632c4e722e6101e0526101fc73d533a949740bb3306d119cc777fa900ba034cd525afa15612f7557601f3d1115612f7557600050610240516c02863c1f5cdae4200000000018556020610240600463b26b238e6101e0526101fc600073d533a949740bb3306d119cc777fa900ba034cd525af115612f7557601f3d1115612f755760005061024051600755612f5d56600436101561000d57611b44565b600035601c5260005134612c3d5763313ce56781141561003257601260005260206000f35b63d31f3f6d8114156100665760016014546c01431e0fae6d7217caa0000000811015612c3d57026015015460005260206000f35b634b8200938114156101475760043560a01c612c3d576004356101605273d061d61a4d941c39e5453435b6345dc261c2fce06101805260006101405261014061012060006002818352015b6101205160200261016001513314156100cd57600183526100de565b5b81516001018083528114156100b1575b5050506101405115612c3d5760043561014052610140516006580161231f565b60005060043561014052600860043560e05260c052604060c02054610160526009546101805261018051610160516101405160065801611b4a565b600050600160005260206000f35b63331345838114156101f35760043560a01c612c3d5760043561014052610140516006580161231f565b6000506c02863c1f5cdae420000000001760043560e05260c052604060c0205460206101e06044638b752bb06101405260043561016052306101805261015c73d061d61a4d941c39e5453435b6345dc261c2fce05afa15612c3d57601f3d1115612c3d576000506101e051808210612c3d578082039050905060005260206000f35b63e77e74378114156102605760043560a01c612c3d5760243560a01c612c3d576c02863c1f5cdae420000000002560043560e05260c052604060c02060243560e05260c052604060c020547001000000000000000000000000000000008082069050905060005260206000f35b6333fd6f748114156104775760043560a01c612c3d5760243560a01c612c3d5760056c02863c1f5cdae420000000002260243560e05260c052604060c0200154610140526009546101605260006101605118156103ab574260026c02863c1f5cdae420000000002260243560e05260c052604060c0200154808211156102e657806102e8565b815b90509050610180526101805160046c02863c1f5cdae420000000002260243560e05260c052604060c0200154808210612c3d57808203905090506101a05261014080516101a05160036c02863c1f5cdae420000000002260243560e05260c052604060c0200154808202821582848304141715612c3d5780905090509050670de0b6b3a7640000808202821582848304141715612c3d578090509050905061016051808015612c3d578204905090508181830110612c3d57808201905090508152505b6c02863c1f5cdae420000000002460243560e05260c052604060c02060043560e05260c052604060c0205461018052600860043560e05260c052604060c020546101405161018051808210612c3d5780820390509050808202821582848304141715612c3d5780905090509050670de0b6b3a7640000808204905090506101a0526c02863c1f5cdae420000000002560043560e05260c052604060c02060243560e05260c052604060c0205460801c6101a0518181830110612c3d578082019050905060005260206000f35b63bdf981168114156104ad5760043560a01c612c3d576004356c02863c1f5cdae42000000000233360e05260c052604060c02055005b63e6f1daf28114156104c9573361014052600061016052610532565b6384e9bd7e8114156104f55760006101605260043560a01c612c3d576020600461014037600050610532565b639faceb1b81141561052d5760043560a01c612c3d57602060046101403760243560a01c612c3d576020602461016037600050610532565b6105a6565b600054612c3d57600160005560006101605118156105565733610140511415612c3d575b610140516101605161014051610180526009546101a05260016101c052610160516101e0526101e0516101c0516101a0516101805160065801611d88565b61016052610140526000506000600055005b6396c551758114156107a85760043560a01c612c3d576c02863c1f5cdae420000000001660043560e05260c052604060c020546101405260206102c0604463da020a1861022052600435610240526020610200602463010ae757610180526004356101a05261019c735f3b5dfeb7b28cdbd7faba78963ee202a494e2a25afa15612c3d57601f3d1115612c3d57600050610200516102605261023c735f3b5dfeb7b28cdbd7faba78963ee202a494e2a25afa15612c3d57601f3d1115612c3d576000506102c05161016052600860043560e05260c052604060c020546101805260206102c060246370a08231610240526004356102605261025c735f3b5dfeb7b28cdbd7faba78963ee202a494e2a25afa15612c3d57601f3d1115612c3d576000506102c0516106d75760016106e1565b6101405161016051115b5b15612c3d57610180516028808202821582848304141715612c3d5780905090509050606480820490509050601260043560e05260c052604060c020541115612c3d576101405161016051610180516004356101a0526101a0516006580161231f565b6101805261016052610140526000506101405161016051610180516004356101a052600860043560e05260c052604060c020546101c0526009546101e0526101e0516101c0516101a05160065801611b4a565b610180526101605261014052600050005b63b6b55f258114156107c457336101405260006101605261082d565b636e553f658114156107f05760006101605260243560a01c612c3d57602060246101403760005061082d565b6383df67478114156108285760243560a01c612c3d57602060246101403760443560011c612c3d57602060446101603760005061082d565b610a69565b600154612c3d57600160015561014051610160516101405161018052610180516006580161231f565b6101605261014052600050600060043518156109e85760006c02863c1f5cdae4200000000019541415610180526009546101a05261018051156108ee576101405161016051610180516101a051610140516101c0526101a0516101e052610160516102005260006102205261022051610200516101e0516101c05160065801611d88565b6101a0526101805261016052610140526000505b6101a080516004358181830110612c3d578082019050905081525060086101405160e05260c052604060c020546004358181830110612c3d57808201905090506101c0526101c05160086101405160e05260c052604060c020556101a0516009556101405161016051610180516101a0516101c051610140516101e0526101c051610200526101a0516102205261022051610200516101e05160065801611b4a565b6101c0526101a05261018052610160526101405260005060206102a060646323b872dd6101e05233610200523061022052600435610240526101fc60006006545af115612c3d57601f3d1115612c3d576000506102a0505b610140517fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c61018080808060043581525050602090509050610180a26101405160007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef61018080808060043581525050602090509050610180a36000600155005b632e1a7d4d811415610a8057600061014052610aab565b6338d07436811415610aa65760243560011c612c3d576020602461014037600050610aab565b610cb1565b600254612c3d576001600255610140513361016052610160516006580161231f565b6101405260005060006004351815610c365760006c02863c1f5cdae420000000001954141561016052600954610180526101605115610b5657610140516101605161018051336101a052610180516101c052610140516101e052600061020052610200516101e0516101c0516101a05160065801611d88565b6101805261016052610140526000505b6101808051600435808210612c3d578082039050905081525060083360e05260c052604060c02054600435808210612c3d57808203905090506101a0526101a05160083360e05260c052604060c02055610180516009556101405161016051610180516101a051336101c0526101a0516101e0526101805161020052610200516101e0516101c05160065801611b4a565b6101a0526101805261016052610140526000506020610260604463a9059cbb6101c052336101e052600435610200526101dc60006006545af115612c3d57601f3d1115612c3d57600050610260505b337f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a942436461016080808060043581525050602090509050610160a26000337fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef61016080808060043581525050602090509050610160a36000600255005b63a9059cbb811415610d0e57600354612c3d57600160035560043560a01c612c3d573361014052600435610160526024356101805261018051610160516101405160065801612911565b6000506001600052600060035560206000f35b6323b872dd811415610dfe57600454612c3d57600160045560043560a01c612c3d5760243560a01c612c3d57600a60043560e05260c052604060c0203360e05260c052604060c02054610140527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610140511815610db95761014051604435808210612c3d5780820390509050600a60043560e05260c052604060c0203360e05260c052604060c020555b6101405160043561016052602435610180526044356101a0526101a051610180516101605160065801612911565b610140526000506001600052600060045560206000f35b63095ea7b3811415610e7b5760043560a01c612c3d57602435600a3360e05260c052604060c02060043560e05260c052604060c02055600435337f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92561014080808060243581525050602090509050610140a3600160005260206000f35b6339509351811415610f2e5760043560a01c612c3d57600a3360e05260c052604060c02060043560e05260c052604060c020546024358181830110612c3d57808201905090506101405261014051600a3360e05260c052604060c02060043560e05260c052604060c02055600435337f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9256101608080806101405181525050602090509050610160a3600160005260206000f35b63a457c2d7811415610fdf5760043560a01c612c3d57600a3360e05260c052604060c02060043560e05260c052604060c02054602435808210612c3d57808203905090506101405261014051600a3360e05260c052604060c02060043560e05260c052604060c02055600435337f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9256101608080806101405181525050602090509050610160a3600160005260206000f35b63e8de0d4d8114156110c55760043560a01c612c3d5760243560a01c612c3d576c02863c1f5cdae420000000002654331415612c3d576c02863c1f5cdae420000000001954610140526008610140511015612c3d5760016c02863c1f5cdae420000000002260043560e05260c052604060c0200154612c3d5760243560016c02863c1f5cdae420000000002260043560e05260c052604060c02001556004356001610140516008811015612c3d57026c02863c1f5cdae420000000001a01556101405160018181830110612c3d57808201905090506c02863c1f5cdae420000000001955005b63058a3a2481141561116f5760043560a01c612c3d5760243560a01c612c3d5760016c02863c1f5cdae420000000002260043560e05260c052604060c0200154610140526101405133141561111b57600161112d565b6c02863c1f5cdae42000000000265433145b5b15612c3d576000610140511815612c3d5760006024351815612c3d5760243560016c02863c1f5cdae420000000002260043560e05260c052604060c0200155005b6393f7aa6781141561147457600554612c3d57600160055560043560a01c612c3d5760016c02863c1f5cdae420000000002260043560e05260c052604060c0200154331415612c3d576000610140526009546101605260006101805260006101a0526101a05161018051610160516101405160065801611d88565b600050600060046101a0527f23b872dd000000000000000000000000000000000000000000000000000000006101c0526101a060048060208461020001018260208501600060045af15050805182019150503360208261020001015260208101905030602082610200010152602081019050602435602082610200010152602081019050806102005261020090508051602001806102c08284600060045af115612c3d57505060206103a06102c0516102e060006004355af115612c3d5760203d808211156112b957806112bb565b815b90509050610380526103808051602001806101408284600060045af115612c3d575050600061014051181561131d576101408060200151600082518060209013612c3d5780919012612c3d57806020036101000a820490509050905015612c3d575b60026c02863c1f5cdae420000000002260043560e05260c052604060c02001546101a0526101a051421061137e5760243562093a808082049050905060036c02863c1f5cdae420000000002260043560e05260c052604060c0200155611417565b6101a05142808210612c3d57808203905090506101c0526101c05160036c02863c1f5cdae420000000002260043560e05260c052604060c0200154808202821582848304141715612c3d57809050905090506101e0526024356101e0518181830110612c3d578082019050905062093a808082049050905060036c02863c1f5cdae420000000002260043560e05260c052604060c02001555b4260046c02863c1f5cdae420000000002260043560e05260c052604060c02001554262093a808181830110612c3d578082019050905060026c02863c1f5cdae420000000002260043560e05260c052604060c02001556000600555005b6390b229978114156114b45760043560011c612c3d576c02863c1f5cdae420000000002654331415612c3d576004356c02863c1f5cdae420000000002855005b636b441a4081141561152c5760043560a01c612c3d576c02863c1f5cdae420000000002654331415612c3d576004356c02863c1f5cdae4200000000027557f2f56810a6bf40af059b96d3aea4db54081f378029a518390491093a7b67032e961014080808060043581525050602090509050610140a1005b63e5ea47b88114156115a4576c02863c1f5cdae4200000000027546101405261014051331415612c3d57610140516c02863c1f5cdae4200000000026557febee2d5739011062cb4f14113f3b36bf0ffe3da5c0568f64189d1012a11891056101608080806101405181525050602090509050610160a1005b6382c630668114156115bc5760065460005260206000f35b63be5d1be98114156115d45760075460005260206000f35b6370a082318114156116045760043560a01c612c3d57600860043560e05260c052604060c0205460005260206000f35b6318160ddd81141561161c5760095460005260206000f35b63dd62ed3e8114156116645760043560a01c612c3d5760243560a01c612c3d57600a60043560e05260c052604060c02060243560e05260c052604060c0205460005260206000f35b6306fdde0381141561170157600b80610180602082540161012060006003818352015b8261012051602002111561169a576116bc565b61012051850154610120516020028501525b8151600101808352811415611687575b50505050505061018051806101a001818260206001820306601f82010390500336823750506020610160526040610180510160206001820306601f8201039050610160f35b6395d89b4181141561179e57600f80610180602082540161012060006002818352015b8261012051602002111561173757611759565b61012051850154610120516020028501525b8151600101808352811415611724575b50505050505061018051806101a001818260206001820306601f82010390500336823750506020610160526040610180510160206001820306601f8201039050610160f35b6313ecb1ca8114156117ce5760043560a01c612c3d57601260043560e05260c052604060c0205460005260206000f35b6317e280898114156117e65760135460005260206000f35b63ef78d4fd8114156117fe5760145460005260206000f35b637598108c8114156118325760016004356c01431e0fae6d7217caa0000000811015612c3d57026015015460005260206000f35b63fec8ee0c8114156118725760016004356c01431e0fae6d7217caa0000000811015612c3d57026c01431e0fae6d72100000000015015460005260206000f35b63de263bfa8114156118ae5760043560a01c612c3d576c02863c1f5cdae420000000001560043560e05260c052604060c0205460005260206000f35b639bd324f28114156118ea5760043560a01c612c3d576c02863c1f5cdae420000000001660043560e05260c052604060c0205460005260206000f35b63094007078114156119265760043560a01c612c3d576c02863c1f5cdae420000000001760043560e05260c052604060c0205460005260206000f35b63180692d081141561194a576c02863c1f5cdae42000000000185460005260206000f35b63963c94b981141561196e576c02863c1f5cdae42000000000195460005260206000f35b6354c49fe98114156119a25760016004356008811015612c3d57026c02863c1f5cdae420000000001a015460005260206000f35b6348e9c65e811415611a465760043560a01c612c3d576c02863c1f5cdae420000000002260043560e05260c052604060c0206101408080808454815250506020810190508080600185015481525050602081019050808060028501548152505060208101905080806003850154815250506020810190508080600485015481525050602081019050808060058501548152505060c09050905060c05260c051610140f35b6301ddabf1811415611a825760043560a01c612c3d576c02863c1f5cdae420000000002360043560e05260c052604060c0205460005260206000f35b63f05cc058811415611ad65760043560a01c612c3d5760243560a01c612c3d576c02863c1f5cdae420000000002460043560e05260c052604060c02060243560e05260c052604060c0205460005260206000f35b63f851a440811415611afa576c02863c1f5cdae42000000000265460005260206000f35b6317f7182a811415611b1e576c02863c1f5cdae42000000000275460005260206000f35b639c868ac0811415611b42576c02863c1f5cdae42000000000285460005260206000f35b505b60006000fd5b6101a0526101405261016052610180526020610260602463bbf7408a6101e05261014051610200526101fc738e0c00ed546602fd9927df742bbabf726d5b0d165afa15612c3d57601f3d1115612c3d57600050610260516101c052602061026060046318160ddd6102005261021c735f3b5dfeb7b28cdbd7faba78963ee202a494e2a25afa15612c3d57601f3d1115612c3d57600050610260516101e052610160516028808202821582848304141715612c3d57809050905090506064808204905090506102005260006101e0511115611c89576102008051610180516101c051808202821582848304141715612c3d57809050905090506101e051808015612c3d57820490509050603c808202821582848304141715612c3d57809050905090506064808204905090508181830110612c3d57808201905090508152505b610160516102005180821115611c9f5780611ca1565b815b905090506102005260126101405160e05260c052604060c02054610220526102005160126101405160e05260c052604060c02055601354610200518181830110612c3d578082019050905061022051808210612c3d578082039050905061024052610240516013557f7ecd84343f76a23d2227290e0288da3251b045541698e575a5515af4f04197a361026080808061014051815250506020810190508080610160518152505060208101905080806101805181525050602081019050808061020051815250506020810190508080610240518152505060a090509050610260a16101a051565b6101c0526101405261016052610180526101a05260006101e0526101a051610200526000610140511815611e1c5760086101405160e05260c052604060c020546101e0526101805115611ddf576101a05115611de2565b60005b15611e1b576c02863c1f5cdae42000000000236101405160e05260c052604060c020546102005261020051611e1a5761014051610200525b5b5b6c02863c1f5cdae4200000000019546102205261024060006008818352015b61022051610240511415611e4e57612317565b6001610240516008811015612c3d57026c02863c1f5cdae420000000001a01546102605260056c02863c1f5cdae42000000000226102605160e05260c052604060c0200154610280524260026c02863c1f5cdae42000000000226102605160e05260c052604060c020015480821115611ec75780611ec9565b815b905090506102a0526102a05160046c02863c1f5cdae42000000000226102605160e05260c052604060c0200154808210612c3d57808203905090506102c05260006102c0511815611ff1576102a05160046c02863c1f5cdae42000000000226102605160e05260c052604060c02001556000610160511815611ff05761028080516102c05160036c02863c1f5cdae42000000000226102605160e05260c052604060c0200154808202821582848304141715612c3d5780905090509050670de0b6b3a7640000808202821582848304141715612c3d578090509050905061016051808015612c3d578204905090508181830110612c3d57808201905090508152506102805160056c02863c1f5cdae42000000000226102605160e05260c052604060c02001555b5b6000610140511815612306576c02863c1f5cdae42000000000246102605160e05260c052604060c0206101405160e05260c052604060c020546102e052600061030052610280516102e05110156120b957610280516c02863c1f5cdae42000000000246102605160e05260c052604060c0206101405160e05260c052604060c020556101e051610280516102e051808210612c3d5780820390509050808202821582848304141715612c3d5780905090509050670de0b6b3a764000080820490509050610300525b6c02863c1f5cdae42000000000256101405160e05260c052604060c0206102605160e05260c052604060c02054610320526103205160801c610300518181830110612c3d57808201905090506103405260006103405111156123055761032051700100000000000000000000000000000000808206905090506103605261018051156122ae57600060046103e0527fa9059cbb00000000000000000000000000000000000000000000000000000000610400526103e060048060208461044001018260208501600060045af15050805182019150506102005160208261044001015260208101905061034051602082610440010152602081019050806104405261044090508051602001806104e08284600060045af115612c3d57505060206105a06104e0516105006000610260515af115612c3d5760203d808211156122005780612202565b815b90509050610580526105808051602001806103808284600060045af115612c3d5750506000610380511815612264576103808060200151600082518060209013612c3d5780919012612c3d57806020036101000a820490509050905015612c3d575b61036051610340518181830110612c3d57808201905090506c02863c1f5cdae42000000000256101405160e05260c052604060c0206102605160e05260c052604060c02055612304565b600061030051111561230357610360516103405160801b8181830110612c3d57808201905090506c02863c1f5cdae42000000000256101405160e05260c052604060c0206102605160e05260c052604060c020555b5b5b5b5b8151600101808352811415611e3b575b50506101c051565b6101605261014052601454610180526001610180516c01431e0fae6d7217caa0000000811015612c3d5702601501546101a0526001610180516c01431e0fae6d7217caa0000000811015612c3d57026c01431e0fae6d7210000000001501546101c0526c02863c1f5cdae4200000000018546101e0526101e05161020052600754610220526101a051610220511061244c5760206102a0600463b26b238e6102405261025c600073d533a949740bb3306d119cc777fa900ba034cd525af115612c3d57601f3d1115612c3d576000506102a05160075560206102a06004632c4e722e6102405261025c73d533a949740bb3306d119cc777fa900ba034cd525afa15612c3d57601f3d1115612c3d576000506102a05161020052610200516c02863c1f5cdae4200000000018555b6c02863c1f5cdae420000000002854156124675760006101e0525b6101a0514211156127ad5760135461024052732f50d538606fa9edd2b11e2446beb18c9d5846bb3b15612c3d5760006000602463615e523761026052306102805261027c6000732f50d538606fa9edd2b11e2446beb18c9d5846bb5af115612c3d576101a051610260526101a05162093a808181830110612c3d578082019050905062093a808082049050905062093a80808202821582848304141715612c3d5780905090509050428082111561251e5780612520565b815b90509050610280526102a060006101f4818352015b6102805161026051808210612c3d57808203905090506102c05260206103a0604463d3078c946103005230610320526102605162093a808082049050905062093a80808202821582848304141715612c3d57809050905090506103405261031c732f50d538606fa9edd2b11e2446beb18c9d5846bb5afa15612c3d57601f3d1115612c3d576000506103a0516102e0526000610240511115612750576102605161022051106125ec576102805161022051106125ef565b60005b156126eb576101c080516101e0516102e051808202821582848304141715612c3d57809050905090506102205161026051808210612c3d5780820390509050808202821582848304141715612c3d578090509050905061024051808015612c3d578204905090508181830110612c3d5780820190509050815250610200516101e0526101c080516101e0516102e051808202821582848304141715612c3d57809050905090506102805161022051808210612c3d5780820390509050808202821582848304141715612c3d578090509050905061024051808015612c3d578204905090508181830110612c3d578082019050905081525061274f565b6101c080516101e0516102e051808202821582848304141715612c3d57809050905090506102c051808202821582848304141715612c3d578090509050905061024051808015612c3d578204905090508181830110612c3d57808201905090508152505b5b42610280511415612760576127aa565b61028051610260526102805162093a808181830110612c3d5780820190509050428082111561278f5780612791565b815b90509050610280525b8151600101808352811415612535575b50505b6101808051600180820180607f1d8160801d1415612c3d578090509050905081525061018051601455426001610180516c01431e0fae6d7217caa0000000811015612c3d5702601501556101c0516001610180516c01431e0fae6d7217caa0000000811015612c3d57026c01431e0fae6d72100000000015015560126101405160e05260c052604060c02054610240526c02863c1f5cdae42000000000176101405160e05260c052604060c0208054610240516101c0516c02863c1f5cdae42000000000156101405160e05260c052604060c02054808210612c3d5780820390509050808202821582848304141715612c3d5780905090509050670de0b6b3a7640000808204905090508181830110612c3d57808201905090508155506101c0516c02863c1f5cdae42000000000156101405160e05260c052604060c02055426c02863c1f5cdae42000000000166101405160e05260c052604060c0205561016051565b6101a0526101405261016052610180526101405161016051610180516101a051610140516101c0526101c0516006580161231f565b6101a0526101805261016052610140526000506101405161016051610180516101a051610160516101c0526101c0516006580161231f565b6101a0526101805261016052610140526000506000610180511815612bf6576009546101c05260006c02863c1f5cdae42000000000195414156101e0526101e05115612a2d576101405161016051610180516101a0516101c0516101e05161014051610200526101c051610220526000610240526000610260526102605161024051610220516102005160065801611d88565b6101e0526101c0526101a0526101805261016052610140526000505b60086101405160e05260c052604060c0205461018051808210612c3d5780820390509050610200526102005160086101405160e05260c052604060c020556101405161016051610180516101a0516101c0516101e05161020051610140516102205261020051610240526101c0516102605261026051610240516102205160065801611b4a565b610200526101e0526101c0526101a0526101805261016052610140526000506101e05115612b4d576101405161016051610180516101a0516101c0516101e0516102005161016051610220526101c051610240526000610260526000610280526102805161026051610240516102205160065801611d88565b610200526101e0526101c0526101a0526101805261016052610140526000505b60086101605160e05260c052604060c02054610180518181830110612c3d5780820190509050610200526102005160086101605160e05260c052604060c020556101405161016051610180516101a0516101c0516101e05161020051610160516102205261020051610240526101c0516102605261026051610240516102205160065801611b4a565b610200526101e0526101c0526101a0526101805261016052610140526000505b61016051610140517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6101c080808061018051815250506020905090506101c0a36101a051565b600080fd5b61031b612f5d0361031b60003961031b612f5d036000f35b600080fd",
}

// GaugeABI is the input ABI used to generate the binding from.
// Deprecated: Use GaugeMetaData.ABI instead.
var GaugeABI = GaugeMetaData.ABI

// GaugeBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use GaugeMetaData.Bin instead.
var GaugeBin = GaugeMetaData.Bin

// DeployGauge deploys a new Ethereum contract, binding an instance of Gauge to it.
func DeployGauge(auth *bind.TransactOpts, backend bind.ContractBackend, _lp_token common.Address, _admin common.Address) (common.Address, *types.Transaction, *Gauge, error) {
	parsed, err := GaugeMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(GaugeBin), backend, _lp_token, _admin)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Gauge{GaugeCaller: GaugeCaller{contract: contract}, GaugeTransactor: GaugeTransactor{contract: contract}, GaugeFilterer: GaugeFilterer{contract: contract}}, nil
}

// Gauge is an auto generated Go binding around an Ethereum contract.
type Gauge struct {
	GaugeCaller     // Read-only binding to the contract
	GaugeTransactor // Write-only binding to the contract
	GaugeFilterer   // Log filterer for contract events
}

// GaugeCaller is an auto generated read-only Go binding around an Ethereum contract.
type GaugeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GaugeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type GaugeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GaugeFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type GaugeFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GaugeSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type GaugeSession struct {
	Contract     *Gauge            // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// GaugeCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type GaugeCallerSession struct {
	Contract *GaugeCaller  // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// GaugeTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type GaugeTransactorSession struct {
	Contract     *GaugeTransactor  // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// GaugeRaw is an auto generated low-level Go binding around an Ethereum contract.
type GaugeRaw struct {
	Contract *Gauge // Generic contract binding to access the raw methods on
}

// GaugeCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type GaugeCallerRaw struct {
	Contract *GaugeCaller // Generic read-only contract binding to access the raw methods on
}

// GaugeTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type GaugeTransactorRaw struct {
	Contract *GaugeTransactor // Generic write-only contract binding to access the raw methods on
}

// NewGauge creates a new instance of Gauge, bound to a specific deployed contract.
func NewGauge(address common.Address, backend bind.ContractBackend) (*Gauge, error) {
	contract, err := bindGauge(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Gauge{GaugeCaller: GaugeCaller{contract: contract}, GaugeTransactor: GaugeTransactor{contract: contract}, GaugeFilterer: GaugeFilterer{contract: contract}}, nil
}

// NewGaugeCaller creates a new read-only instance of Gauge, bound to a specific deployed contract.
func NewGaugeCaller(address common.Address, caller bind.ContractCaller) (*GaugeCaller, error) {
	contract, err := bindGauge(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &GaugeCaller{contract: contract}, nil
}

// NewGaugeTransactor creates a new write-only instance of Gauge, bound to a specific deployed contract.
func NewGaugeTransactor(address common.Address, transactor bind.ContractTransactor) (*GaugeTransactor, error) {
	contract, err := bindGauge(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &GaugeTransactor{contract: contract}, nil
}

// NewGaugeFilterer creates a new log filterer instance of Gauge, bound to a specific deployed contract.
func NewGaugeFilterer(address common.Address, filterer bind.ContractFilterer) (*GaugeFilterer, error) {
	contract, err := bindGauge(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &GaugeFilterer{contract: contract}, nil
}

// bindGauge binds a generic wrapper to an already deployed contract.
func bindGauge(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(GaugeABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Gauge *GaugeRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Gauge.Contract.GaugeCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Gauge *GaugeRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Gauge.Contract.GaugeTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Gauge *GaugeRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Gauge.Contract.GaugeTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Gauge *GaugeCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Gauge.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Gauge *GaugeTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Gauge.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Gauge *GaugeTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Gauge.Contract.contract.Transact(opts, method, params...)
}

// Admin is a free data retrieval call binding the contract method 0xf851a440.
//
// Solidity: function admin() view returns(address)
func (_Gauge *GaugeCaller) Admin(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Gauge.contract.Call(opts, &out, "admin")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Admin is a free data retrieval call binding the contract method 0xf851a440.
//
// Solidity: function admin() view returns(address)
func (_Gauge *GaugeSession) Admin() (common.Address, error) {
	return _Gauge.Contract.Admin(&_Gauge.CallOpts)
}

// Admin is a free data retrieval call binding the contract method 0xf851a440.
//
// Solidity: function admin() view returns(address)
func (_Gauge *GaugeCallerSession) Admin() (common.Address, error) {
	return _Gauge.Contract.Admin(&_Gauge.CallOpts)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address arg0, address arg1) view returns(uint256)
func (_Gauge *GaugeCaller) Allowance(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Gauge.contract.Call(opts, &out, "allowance", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address arg0, address arg1) view returns(uint256)
func (_Gauge *GaugeSession) Allowance(arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	return _Gauge.Contract.Allowance(&_Gauge.CallOpts, arg0, arg1)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address arg0, address arg1) view returns(uint256)
func (_Gauge *GaugeCallerSession) Allowance(arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	return _Gauge.Contract.Allowance(&_Gauge.CallOpts, arg0, arg1)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address arg0) view returns(uint256)
func (_Gauge *GaugeCaller) BalanceOf(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Gauge.contract.Call(opts, &out, "balanceOf", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address arg0) view returns(uint256)
func (_Gauge *GaugeSession) BalanceOf(arg0 common.Address) (*big.Int, error) {
	return _Gauge.Contract.BalanceOf(&_Gauge.CallOpts, arg0)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address arg0) view returns(uint256)
func (_Gauge *GaugeCallerSession) BalanceOf(arg0 common.Address) (*big.Int, error) {
	return _Gauge.Contract.BalanceOf(&_Gauge.CallOpts, arg0)
}

// ClaimableReward is a free data retrieval call binding the contract method 0x33fd6f74.
//
// Solidity: function claimable_reward(address _user, address _reward_token) view returns(uint256)
func (_Gauge *GaugeCaller) ClaimableReward(opts *bind.CallOpts, _user common.Address, _reward_token common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Gauge.contract.Call(opts, &out, "claimable_reward", _user, _reward_token)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ClaimableReward is a free data retrieval call binding the contract method 0x33fd6f74.
//
// Solidity: function claimable_reward(address _user, address _reward_token) view returns(uint256)
func (_Gauge *GaugeSession) ClaimableReward(_user common.Address, _reward_token common.Address) (*big.Int, error) {
	return _Gauge.Contract.ClaimableReward(&_Gauge.CallOpts, _user, _reward_token)
}

// ClaimableReward is a free data retrieval call binding the contract method 0x33fd6f74.
//
// Solidity: function claimable_reward(address _user, address _reward_token) view returns(uint256)
func (_Gauge *GaugeCallerSession) ClaimableReward(_user common.Address, _reward_token common.Address) (*big.Int, error) {
	return _Gauge.Contract.ClaimableReward(&_Gauge.CallOpts, _user, _reward_token)
}

// ClaimedReward is a free data retrieval call binding the contract method 0xe77e7437.
//
// Solidity: function claimed_reward(address _addr, address _token) view returns(uint256)
func (_Gauge *GaugeCaller) ClaimedReward(opts *bind.CallOpts, _addr common.Address, _token common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Gauge.contract.Call(opts, &out, "claimed_reward", _addr, _token)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ClaimedReward is a free data retrieval call binding the contract method 0xe77e7437.
//
// Solidity: function claimed_reward(address _addr, address _token) view returns(uint256)
func (_Gauge *GaugeSession) ClaimedReward(_addr common.Address, _token common.Address) (*big.Int, error) {
	return _Gauge.Contract.ClaimedReward(&_Gauge.CallOpts, _addr, _token)
}

// ClaimedReward is a free data retrieval call binding the contract method 0xe77e7437.
//
// Solidity: function claimed_reward(address _addr, address _token) view returns(uint256)
func (_Gauge *GaugeCallerSession) ClaimedReward(_addr common.Address, _token common.Address) (*big.Int, error) {
	return _Gauge.Contract.ClaimedReward(&_Gauge.CallOpts, _addr, _token)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint256)
func (_Gauge *GaugeCaller) Decimals(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Gauge.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint256)
func (_Gauge *GaugeSession) Decimals() (*big.Int, error) {
	return _Gauge.Contract.Decimals(&_Gauge.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint256)
func (_Gauge *GaugeCallerSession) Decimals() (*big.Int, error) {
	return _Gauge.Contract.Decimals(&_Gauge.CallOpts)
}

// FutureAdmin is a free data retrieval call binding the contract method 0x17f7182a.
//
// Solidity: function future_admin() view returns(address)
func (_Gauge *GaugeCaller) FutureAdmin(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Gauge.contract.Call(opts, &out, "future_admin")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// FutureAdmin is a free data retrieval call binding the contract method 0x17f7182a.
//
// Solidity: function future_admin() view returns(address)
func (_Gauge *GaugeSession) FutureAdmin() (common.Address, error) {
	return _Gauge.Contract.FutureAdmin(&_Gauge.CallOpts)
}

// FutureAdmin is a free data retrieval call binding the contract method 0x17f7182a.
//
// Solidity: function future_admin() view returns(address)
func (_Gauge *GaugeCallerSession) FutureAdmin() (common.Address, error) {
	return _Gauge.Contract.FutureAdmin(&_Gauge.CallOpts)
}

// FutureEpochTime is a free data retrieval call binding the contract method 0xbe5d1be9.
//
// Solidity: function future_epoch_time() view returns(uint256)
func (_Gauge *GaugeCaller) FutureEpochTime(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Gauge.contract.Call(opts, &out, "future_epoch_time")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// FutureEpochTime is a free data retrieval call binding the contract method 0xbe5d1be9.
//
// Solidity: function future_epoch_time() view returns(uint256)
func (_Gauge *GaugeSession) FutureEpochTime() (*big.Int, error) {
	return _Gauge.Contract.FutureEpochTime(&_Gauge.CallOpts)
}

// FutureEpochTime is a free data retrieval call binding the contract method 0xbe5d1be9.
//
// Solidity: function future_epoch_time() view returns(uint256)
func (_Gauge *GaugeCallerSession) FutureEpochTime() (*big.Int, error) {
	return _Gauge.Contract.FutureEpochTime(&_Gauge.CallOpts)
}

// InflationRate is a free data retrieval call binding the contract method 0x180692d0.
//
// Solidity: function inflation_rate() view returns(uint256)
func (_Gauge *GaugeCaller) InflationRate(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Gauge.contract.Call(opts, &out, "inflation_rate")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// InflationRate is a free data retrieval call binding the contract method 0x180692d0.
//
// Solidity: function inflation_rate() view returns(uint256)
func (_Gauge *GaugeSession) InflationRate() (*big.Int, error) {
	return _Gauge.Contract.InflationRate(&_Gauge.CallOpts)
}

// InflationRate is a free data retrieval call binding the contract method 0x180692d0.
//
// Solidity: function inflation_rate() view returns(uint256)
func (_Gauge *GaugeCallerSession) InflationRate() (*big.Int, error) {
	return _Gauge.Contract.InflationRate(&_Gauge.CallOpts)
}

// IntegrateCheckpoint is a free data retrieval call binding the contract method 0xd31f3f6d.
//
// Solidity: function integrate_checkpoint() view returns(uint256)
func (_Gauge *GaugeCaller) IntegrateCheckpoint(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Gauge.contract.Call(opts, &out, "integrate_checkpoint")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// IntegrateCheckpoint is a free data retrieval call binding the contract method 0xd31f3f6d.
//
// Solidity: function integrate_checkpoint() view returns(uint256)
func (_Gauge *GaugeSession) IntegrateCheckpoint() (*big.Int, error) {
	return _Gauge.Contract.IntegrateCheckpoint(&_Gauge.CallOpts)
}

// IntegrateCheckpoint is a free data retrieval call binding the contract method 0xd31f3f6d.
//
// Solidity: function integrate_checkpoint() view returns(uint256)
func (_Gauge *GaugeCallerSession) IntegrateCheckpoint() (*big.Int, error) {
	return _Gauge.Contract.IntegrateCheckpoint(&_Gauge.CallOpts)
}

// IntegrateCheckpointOf is a free data retrieval call binding the contract method 0x9bd324f2.
//
// Solidity: function integrate_checkpoint_of(address arg0) view returns(uint256)
func (_Gauge *GaugeCaller) IntegrateCheckpointOf(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Gauge.contract.Call(opts, &out, "integrate_checkpoint_of", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// IntegrateCheckpointOf is a free data retrieval call binding the contract method 0x9bd324f2.
//
// Solidity: function integrate_checkpoint_of(address arg0) view returns(uint256)
func (_Gauge *GaugeSession) IntegrateCheckpointOf(arg0 common.Address) (*big.Int, error) {
	return _Gauge.Contract.IntegrateCheckpointOf(&_Gauge.CallOpts, arg0)
}

// IntegrateCheckpointOf is a free data retrieval call binding the contract method 0x9bd324f2.
//
// Solidity: function integrate_checkpoint_of(address arg0) view returns(uint256)
func (_Gauge *GaugeCallerSession) IntegrateCheckpointOf(arg0 common.Address) (*big.Int, error) {
	return _Gauge.Contract.IntegrateCheckpointOf(&_Gauge.CallOpts, arg0)
}

// IntegrateFraction is a free data retrieval call binding the contract method 0x09400707.
//
// Solidity: function integrate_fraction(address arg0) view returns(uint256)
func (_Gauge *GaugeCaller) IntegrateFraction(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Gauge.contract.Call(opts, &out, "integrate_fraction", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// IntegrateFraction is a free data retrieval call binding the contract method 0x09400707.
//
// Solidity: function integrate_fraction(address arg0) view returns(uint256)
func (_Gauge *GaugeSession) IntegrateFraction(arg0 common.Address) (*big.Int, error) {
	return _Gauge.Contract.IntegrateFraction(&_Gauge.CallOpts, arg0)
}

// IntegrateFraction is a free data retrieval call binding the contract method 0x09400707.
//
// Solidity: function integrate_fraction(address arg0) view returns(uint256)
func (_Gauge *GaugeCallerSession) IntegrateFraction(arg0 common.Address) (*big.Int, error) {
	return _Gauge.Contract.IntegrateFraction(&_Gauge.CallOpts, arg0)
}

// IntegrateInvSupply is a free data retrieval call binding the contract method 0xfec8ee0c.
//
// Solidity: function integrate_inv_supply(uint256 arg0) view returns(uint256)
func (_Gauge *GaugeCaller) IntegrateInvSupply(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Gauge.contract.Call(opts, &out, "integrate_inv_supply", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// IntegrateInvSupply is a free data retrieval call binding the contract method 0xfec8ee0c.
//
// Solidity: function integrate_inv_supply(uint256 arg0) view returns(uint256)
func (_Gauge *GaugeSession) IntegrateInvSupply(arg0 *big.Int) (*big.Int, error) {
	return _Gauge.Contract.IntegrateInvSupply(&_Gauge.CallOpts, arg0)
}

// IntegrateInvSupply is a free data retrieval call binding the contract method 0xfec8ee0c.
//
// Solidity: function integrate_inv_supply(uint256 arg0) view returns(uint256)
func (_Gauge *GaugeCallerSession) IntegrateInvSupply(arg0 *big.Int) (*big.Int, error) {
	return _Gauge.Contract.IntegrateInvSupply(&_Gauge.CallOpts, arg0)
}

// IntegrateInvSupplyOf is a free data retrieval call binding the contract method 0xde263bfa.
//
// Solidity: function integrate_inv_supply_of(address arg0) view returns(uint256)
func (_Gauge *GaugeCaller) IntegrateInvSupplyOf(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Gauge.contract.Call(opts, &out, "integrate_inv_supply_of", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// IntegrateInvSupplyOf is a free data retrieval call binding the contract method 0xde263bfa.
//
// Solidity: function integrate_inv_supply_of(address arg0) view returns(uint256)
func (_Gauge *GaugeSession) IntegrateInvSupplyOf(arg0 common.Address) (*big.Int, error) {
	return _Gauge.Contract.IntegrateInvSupplyOf(&_Gauge.CallOpts, arg0)
}

// IntegrateInvSupplyOf is a free data retrieval call binding the contract method 0xde263bfa.
//
// Solidity: function integrate_inv_supply_of(address arg0) view returns(uint256)
func (_Gauge *GaugeCallerSession) IntegrateInvSupplyOf(arg0 common.Address) (*big.Int, error) {
	return _Gauge.Contract.IntegrateInvSupplyOf(&_Gauge.CallOpts, arg0)
}

// IsKilled is a free data retrieval call binding the contract method 0x9c868ac0.
//
// Solidity: function is_killed() view returns(bool)
func (_Gauge *GaugeCaller) IsKilled(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Gauge.contract.Call(opts, &out, "is_killed")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsKilled is a free data retrieval call binding the contract method 0x9c868ac0.
//
// Solidity: function is_killed() view returns(bool)
func (_Gauge *GaugeSession) IsKilled() (bool, error) {
	return _Gauge.Contract.IsKilled(&_Gauge.CallOpts)
}

// IsKilled is a free data retrieval call binding the contract method 0x9c868ac0.
//
// Solidity: function is_killed() view returns(bool)
func (_Gauge *GaugeCallerSession) IsKilled() (bool, error) {
	return _Gauge.Contract.IsKilled(&_Gauge.CallOpts)
}

// LpToken is a free data retrieval call binding the contract method 0x82c63066.
//
// Solidity: function lp_token() view returns(address)
func (_Gauge *GaugeCaller) LpToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Gauge.contract.Call(opts, &out, "lp_token")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// LpToken is a free data retrieval call binding the contract method 0x82c63066.
//
// Solidity: function lp_token() view returns(address)
func (_Gauge *GaugeSession) LpToken() (common.Address, error) {
	return _Gauge.Contract.LpToken(&_Gauge.CallOpts)
}

// LpToken is a free data retrieval call binding the contract method 0x82c63066.
//
// Solidity: function lp_token() view returns(address)
func (_Gauge *GaugeCallerSession) LpToken() (common.Address, error) {
	return _Gauge.Contract.LpToken(&_Gauge.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Gauge *GaugeCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Gauge.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Gauge *GaugeSession) Name() (string, error) {
	return _Gauge.Contract.Name(&_Gauge.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Gauge *GaugeCallerSession) Name() (string, error) {
	return _Gauge.Contract.Name(&_Gauge.CallOpts)
}

// Period is a free data retrieval call binding the contract method 0xef78d4fd.
//
// Solidity: function period() view returns(int128)
func (_Gauge *GaugeCaller) Period(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Gauge.contract.Call(opts, &out, "period")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Period is a free data retrieval call binding the contract method 0xef78d4fd.
//
// Solidity: function period() view returns(int128)
func (_Gauge *GaugeSession) Period() (*big.Int, error) {
	return _Gauge.Contract.Period(&_Gauge.CallOpts)
}

// Period is a free data retrieval call binding the contract method 0xef78d4fd.
//
// Solidity: function period() view returns(int128)
func (_Gauge *GaugeCallerSession) Period() (*big.Int, error) {
	return _Gauge.Contract.Period(&_Gauge.CallOpts)
}

// PeriodTimestamp is a free data retrieval call binding the contract method 0x7598108c.
//
// Solidity: function period_timestamp(uint256 arg0) view returns(uint256)
func (_Gauge *GaugeCaller) PeriodTimestamp(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Gauge.contract.Call(opts, &out, "period_timestamp", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// PeriodTimestamp is a free data retrieval call binding the contract method 0x7598108c.
//
// Solidity: function period_timestamp(uint256 arg0) view returns(uint256)
func (_Gauge *GaugeSession) PeriodTimestamp(arg0 *big.Int) (*big.Int, error) {
	return _Gauge.Contract.PeriodTimestamp(&_Gauge.CallOpts, arg0)
}

// PeriodTimestamp is a free data retrieval call binding the contract method 0x7598108c.
//
// Solidity: function period_timestamp(uint256 arg0) view returns(uint256)
func (_Gauge *GaugeCallerSession) PeriodTimestamp(arg0 *big.Int) (*big.Int, error) {
	return _Gauge.Contract.PeriodTimestamp(&_Gauge.CallOpts, arg0)
}

// RewardCount is a free data retrieval call binding the contract method 0x963c94b9.
//
// Solidity: function reward_count() view returns(uint256)
func (_Gauge *GaugeCaller) RewardCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Gauge.contract.Call(opts, &out, "reward_count")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RewardCount is a free data retrieval call binding the contract method 0x963c94b9.
//
// Solidity: function reward_count() view returns(uint256)
func (_Gauge *GaugeSession) RewardCount() (*big.Int, error) {
	return _Gauge.Contract.RewardCount(&_Gauge.CallOpts)
}

// RewardCount is a free data retrieval call binding the contract method 0x963c94b9.
//
// Solidity: function reward_count() view returns(uint256)
func (_Gauge *GaugeCallerSession) RewardCount() (*big.Int, error) {
	return _Gauge.Contract.RewardCount(&_Gauge.CallOpts)
}

// RewardData is a free data retrieval call binding the contract method 0x48e9c65e.
//
// Solidity: function reward_data(address arg0) view returns(address token, address distributor, uint256 period_finish, uint256 rate, uint256 last_update, uint256 integral)
func (_Gauge *GaugeCaller) RewardData(opts *bind.CallOpts, arg0 common.Address) (struct {
	Token        common.Address
	Distributor  common.Address
	PeriodFinish *big.Int
	Rate         *big.Int
	LastUpdate   *big.Int
	Integral     *big.Int
}, error) {
	var out []interface{}
	err := _Gauge.contract.Call(opts, &out, "reward_data", arg0)

	outstruct := new(struct {
		Token        common.Address
		Distributor  common.Address
		PeriodFinish *big.Int
		Rate         *big.Int
		LastUpdate   *big.Int
		Integral     *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Token = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.Distributor = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
	outstruct.PeriodFinish = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.Rate = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.LastUpdate = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)
	outstruct.Integral = *abi.ConvertType(out[5], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// RewardData is a free data retrieval call binding the contract method 0x48e9c65e.
//
// Solidity: function reward_data(address arg0) view returns(address token, address distributor, uint256 period_finish, uint256 rate, uint256 last_update, uint256 integral)
func (_Gauge *GaugeSession) RewardData(arg0 common.Address) (struct {
	Token        common.Address
	Distributor  common.Address
	PeriodFinish *big.Int
	Rate         *big.Int
	LastUpdate   *big.Int
	Integral     *big.Int
}, error) {
	return _Gauge.Contract.RewardData(&_Gauge.CallOpts, arg0)
}

// RewardData is a free data retrieval call binding the contract method 0x48e9c65e.
//
// Solidity: function reward_data(address arg0) view returns(address token, address distributor, uint256 period_finish, uint256 rate, uint256 last_update, uint256 integral)
func (_Gauge *GaugeCallerSession) RewardData(arg0 common.Address) (struct {
	Token        common.Address
	Distributor  common.Address
	PeriodFinish *big.Int
	Rate         *big.Int
	LastUpdate   *big.Int
	Integral     *big.Int
}, error) {
	return _Gauge.Contract.RewardData(&_Gauge.CallOpts, arg0)
}

// RewardIntegralFor is a free data retrieval call binding the contract method 0xf05cc058.
//
// Solidity: function reward_integral_for(address arg0, address arg1) view returns(uint256)
func (_Gauge *GaugeCaller) RewardIntegralFor(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Gauge.contract.Call(opts, &out, "reward_integral_for", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RewardIntegralFor is a free data retrieval call binding the contract method 0xf05cc058.
//
// Solidity: function reward_integral_for(address arg0, address arg1) view returns(uint256)
func (_Gauge *GaugeSession) RewardIntegralFor(arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	return _Gauge.Contract.RewardIntegralFor(&_Gauge.CallOpts, arg0, arg1)
}

// RewardIntegralFor is a free data retrieval call binding the contract method 0xf05cc058.
//
// Solidity: function reward_integral_for(address arg0, address arg1) view returns(uint256)
func (_Gauge *GaugeCallerSession) RewardIntegralFor(arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	return _Gauge.Contract.RewardIntegralFor(&_Gauge.CallOpts, arg0, arg1)
}

// RewardTokens is a free data retrieval call binding the contract method 0x54c49fe9.
//
// Solidity: function reward_tokens(uint256 arg0) view returns(address)
func (_Gauge *GaugeCaller) RewardTokens(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Gauge.contract.Call(opts, &out, "reward_tokens", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RewardTokens is a free data retrieval call binding the contract method 0x54c49fe9.
//
// Solidity: function reward_tokens(uint256 arg0) view returns(address)
func (_Gauge *GaugeSession) RewardTokens(arg0 *big.Int) (common.Address, error) {
	return _Gauge.Contract.RewardTokens(&_Gauge.CallOpts, arg0)
}

// RewardTokens is a free data retrieval call binding the contract method 0x54c49fe9.
//
// Solidity: function reward_tokens(uint256 arg0) view returns(address)
func (_Gauge *GaugeCallerSession) RewardTokens(arg0 *big.Int) (common.Address, error) {
	return _Gauge.Contract.RewardTokens(&_Gauge.CallOpts, arg0)
}

// RewardsReceiver is a free data retrieval call binding the contract method 0x01ddabf1.
//
// Solidity: function rewards_receiver(address arg0) view returns(address)
func (_Gauge *GaugeCaller) RewardsReceiver(opts *bind.CallOpts, arg0 common.Address) (common.Address, error) {
	var out []interface{}
	err := _Gauge.contract.Call(opts, &out, "rewards_receiver", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RewardsReceiver is a free data retrieval call binding the contract method 0x01ddabf1.
//
// Solidity: function rewards_receiver(address arg0) view returns(address)
func (_Gauge *GaugeSession) RewardsReceiver(arg0 common.Address) (common.Address, error) {
	return _Gauge.Contract.RewardsReceiver(&_Gauge.CallOpts, arg0)
}

// RewardsReceiver is a free data retrieval call binding the contract method 0x01ddabf1.
//
// Solidity: function rewards_receiver(address arg0) view returns(address)
func (_Gauge *GaugeCallerSession) RewardsReceiver(arg0 common.Address) (common.Address, error) {
	return _Gauge.Contract.RewardsReceiver(&_Gauge.CallOpts, arg0)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Gauge *GaugeCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Gauge.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Gauge *GaugeSession) Symbol() (string, error) {
	return _Gauge.Contract.Symbol(&_Gauge.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Gauge *GaugeCallerSession) Symbol() (string, error) {
	return _Gauge.Contract.Symbol(&_Gauge.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Gauge *GaugeCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Gauge.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Gauge *GaugeSession) TotalSupply() (*big.Int, error) {
	return _Gauge.Contract.TotalSupply(&_Gauge.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Gauge *GaugeCallerSession) TotalSupply() (*big.Int, error) {
	return _Gauge.Contract.TotalSupply(&_Gauge.CallOpts)
}

// WorkingBalances is a free data retrieval call binding the contract method 0x13ecb1ca.
//
// Solidity: function working_balances(address arg0) view returns(uint256)
func (_Gauge *GaugeCaller) WorkingBalances(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Gauge.contract.Call(opts, &out, "working_balances", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// WorkingBalances is a free data retrieval call binding the contract method 0x13ecb1ca.
//
// Solidity: function working_balances(address arg0) view returns(uint256)
func (_Gauge *GaugeSession) WorkingBalances(arg0 common.Address) (*big.Int, error) {
	return _Gauge.Contract.WorkingBalances(&_Gauge.CallOpts, arg0)
}

// WorkingBalances is a free data retrieval call binding the contract method 0x13ecb1ca.
//
// Solidity: function working_balances(address arg0) view returns(uint256)
func (_Gauge *GaugeCallerSession) WorkingBalances(arg0 common.Address) (*big.Int, error) {
	return _Gauge.Contract.WorkingBalances(&_Gauge.CallOpts, arg0)
}

// WorkingSupply is a free data retrieval call binding the contract method 0x17e28089.
//
// Solidity: function working_supply() view returns(uint256)
func (_Gauge *GaugeCaller) WorkingSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Gauge.contract.Call(opts, &out, "working_supply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// WorkingSupply is a free data retrieval call binding the contract method 0x17e28089.
//
// Solidity: function working_supply() view returns(uint256)
func (_Gauge *GaugeSession) WorkingSupply() (*big.Int, error) {
	return _Gauge.Contract.WorkingSupply(&_Gauge.CallOpts)
}

// WorkingSupply is a free data retrieval call binding the contract method 0x17e28089.
//
// Solidity: function working_supply() view returns(uint256)
func (_Gauge *GaugeCallerSession) WorkingSupply() (*big.Int, error) {
	return _Gauge.Contract.WorkingSupply(&_Gauge.CallOpts)
}

// AcceptTransferOwnership is a paid mutator transaction binding the contract method 0xe5ea47b8.
//
// Solidity: function accept_transfer_ownership() returns()
func (_Gauge *GaugeTransactor) AcceptTransferOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Gauge.contract.Transact(opts, "accept_transfer_ownership")
}

// AcceptTransferOwnership is a paid mutator transaction binding the contract method 0xe5ea47b8.
//
// Solidity: function accept_transfer_ownership() returns()
func (_Gauge *GaugeSession) AcceptTransferOwnership() (*types.Transaction, error) {
	return _Gauge.Contract.AcceptTransferOwnership(&_Gauge.TransactOpts)
}

// AcceptTransferOwnership is a paid mutator transaction binding the contract method 0xe5ea47b8.
//
// Solidity: function accept_transfer_ownership() returns()
func (_Gauge *GaugeTransactorSession) AcceptTransferOwnership() (*types.Transaction, error) {
	return _Gauge.Contract.AcceptTransferOwnership(&_Gauge.TransactOpts)
}

// AddReward is a paid mutator transaction binding the contract method 0xe8de0d4d.
//
// Solidity: function add_reward(address _reward_token, address _distributor) returns()
func (_Gauge *GaugeTransactor) AddReward(opts *bind.TransactOpts, _reward_token common.Address, _distributor common.Address) (*types.Transaction, error) {
	return _Gauge.contract.Transact(opts, "add_reward", _reward_token, _distributor)
}

// AddReward is a paid mutator transaction binding the contract method 0xe8de0d4d.
//
// Solidity: function add_reward(address _reward_token, address _distributor) returns()
func (_Gauge *GaugeSession) AddReward(_reward_token common.Address, _distributor common.Address) (*types.Transaction, error) {
	return _Gauge.Contract.AddReward(&_Gauge.TransactOpts, _reward_token, _distributor)
}

// AddReward is a paid mutator transaction binding the contract method 0xe8de0d4d.
//
// Solidity: function add_reward(address _reward_token, address _distributor) returns()
func (_Gauge *GaugeTransactorSession) AddReward(_reward_token common.Address, _distributor common.Address) (*types.Transaction, error) {
	return _Gauge.Contract.AddReward(&_Gauge.TransactOpts, _reward_token, _distributor)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address _spender, uint256 _value) returns(bool)
func (_Gauge *GaugeTransactor) Approve(opts *bind.TransactOpts, _spender common.Address, _value *big.Int) (*types.Transaction, error) {
	return _Gauge.contract.Transact(opts, "approve", _spender, _value)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address _spender, uint256 _value) returns(bool)
func (_Gauge *GaugeSession) Approve(_spender common.Address, _value *big.Int) (*types.Transaction, error) {
	return _Gauge.Contract.Approve(&_Gauge.TransactOpts, _spender, _value)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address _spender, uint256 _value) returns(bool)
func (_Gauge *GaugeTransactorSession) Approve(_spender common.Address, _value *big.Int) (*types.Transaction, error) {
	return _Gauge.Contract.Approve(&_Gauge.TransactOpts, _spender, _value)
}

// ClaimRewards is a paid mutator transaction binding the contract method 0xe6f1daf2.
//
// Solidity: function claim_rewards() returns()
func (_Gauge *GaugeTransactor) ClaimRewards(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Gauge.contract.Transact(opts, "claim_rewards")
}

// ClaimRewards is a paid mutator transaction binding the contract method 0xe6f1daf2.
//
// Solidity: function claim_rewards() returns()
func (_Gauge *GaugeSession) ClaimRewards() (*types.Transaction, error) {
	return _Gauge.Contract.ClaimRewards(&_Gauge.TransactOpts)
}

// ClaimRewards is a paid mutator transaction binding the contract method 0xe6f1daf2.
//
// Solidity: function claim_rewards() returns()
func (_Gauge *GaugeTransactorSession) ClaimRewards() (*types.Transaction, error) {
	return _Gauge.Contract.ClaimRewards(&_Gauge.TransactOpts)
}

// ClaimRewards0 is a paid mutator transaction binding the contract method 0x84e9bd7e.
//
// Solidity: function claim_rewards(address _addr) returns()
func (_Gauge *GaugeTransactor) ClaimRewards0(opts *bind.TransactOpts, _addr common.Address) (*types.Transaction, error) {
	return _Gauge.contract.Transact(opts, "claim_rewards0", _addr)
}

// ClaimRewards0 is a paid mutator transaction binding the contract method 0x84e9bd7e.
//
// Solidity: function claim_rewards(address _addr) returns()
func (_Gauge *GaugeSession) ClaimRewards0(_addr common.Address) (*types.Transaction, error) {
	return _Gauge.Contract.ClaimRewards0(&_Gauge.TransactOpts, _addr)
}

// ClaimRewards0 is a paid mutator transaction binding the contract method 0x84e9bd7e.
//
// Solidity: function claim_rewards(address _addr) returns()
func (_Gauge *GaugeTransactorSession) ClaimRewards0(_addr common.Address) (*types.Transaction, error) {
	return _Gauge.Contract.ClaimRewards0(&_Gauge.TransactOpts, _addr)
}

// ClaimRewards1 is a paid mutator transaction binding the contract method 0x9faceb1b.
//
// Solidity: function claim_rewards(address _addr, address _receiver) returns()
func (_Gauge *GaugeTransactor) ClaimRewards1(opts *bind.TransactOpts, _addr common.Address, _receiver common.Address) (*types.Transaction, error) {
	return _Gauge.contract.Transact(opts, "claim_rewards1", _addr, _receiver)
}

// ClaimRewards1 is a paid mutator transaction binding the contract method 0x9faceb1b.
//
// Solidity: function claim_rewards(address _addr, address _receiver) returns()
func (_Gauge *GaugeSession) ClaimRewards1(_addr common.Address, _receiver common.Address) (*types.Transaction, error) {
	return _Gauge.Contract.ClaimRewards1(&_Gauge.TransactOpts, _addr, _receiver)
}

// ClaimRewards1 is a paid mutator transaction binding the contract method 0x9faceb1b.
//
// Solidity: function claim_rewards(address _addr, address _receiver) returns()
func (_Gauge *GaugeTransactorSession) ClaimRewards1(_addr common.Address, _receiver common.Address) (*types.Transaction, error) {
	return _Gauge.Contract.ClaimRewards1(&_Gauge.TransactOpts, _addr, _receiver)
}

// ClaimableTokens is a paid mutator transaction binding the contract method 0x33134583.
//
// Solidity: function claimable_tokens(address addr) returns(uint256)
func (_Gauge *GaugeTransactor) ClaimableTokens(opts *bind.TransactOpts, addr common.Address) (*types.Transaction, error) {
	return _Gauge.contract.Transact(opts, "claimable_tokens", addr)
}

// ClaimableTokens is a paid mutator transaction binding the contract method 0x33134583.
//
// Solidity: function claimable_tokens(address addr) returns(uint256)
func (_Gauge *GaugeSession) ClaimableTokens(addr common.Address) (*types.Transaction, error) {
	return _Gauge.Contract.ClaimableTokens(&_Gauge.TransactOpts, addr)
}

// ClaimableTokens is a paid mutator transaction binding the contract method 0x33134583.
//
// Solidity: function claimable_tokens(address addr) returns(uint256)
func (_Gauge *GaugeTransactorSession) ClaimableTokens(addr common.Address) (*types.Transaction, error) {
	return _Gauge.Contract.ClaimableTokens(&_Gauge.TransactOpts, addr)
}

// CommitTransferOwnership is a paid mutator transaction binding the contract method 0x6b441a40.
//
// Solidity: function commit_transfer_ownership(address addr) returns()
func (_Gauge *GaugeTransactor) CommitTransferOwnership(opts *bind.TransactOpts, addr common.Address) (*types.Transaction, error) {
	return _Gauge.contract.Transact(opts, "commit_transfer_ownership", addr)
}

// CommitTransferOwnership is a paid mutator transaction binding the contract method 0x6b441a40.
//
// Solidity: function commit_transfer_ownership(address addr) returns()
func (_Gauge *GaugeSession) CommitTransferOwnership(addr common.Address) (*types.Transaction, error) {
	return _Gauge.Contract.CommitTransferOwnership(&_Gauge.TransactOpts, addr)
}

// CommitTransferOwnership is a paid mutator transaction binding the contract method 0x6b441a40.
//
// Solidity: function commit_transfer_ownership(address addr) returns()
func (_Gauge *GaugeTransactorSession) CommitTransferOwnership(addr common.Address) (*types.Transaction, error) {
	return _Gauge.Contract.CommitTransferOwnership(&_Gauge.TransactOpts, addr)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address _spender, uint256 _subtracted_value) returns(bool)
func (_Gauge *GaugeTransactor) DecreaseAllowance(opts *bind.TransactOpts, _spender common.Address, _subtracted_value *big.Int) (*types.Transaction, error) {
	return _Gauge.contract.Transact(opts, "decreaseAllowance", _spender, _subtracted_value)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address _spender, uint256 _subtracted_value) returns(bool)
func (_Gauge *GaugeSession) DecreaseAllowance(_spender common.Address, _subtracted_value *big.Int) (*types.Transaction, error) {
	return _Gauge.Contract.DecreaseAllowance(&_Gauge.TransactOpts, _spender, _subtracted_value)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address _spender, uint256 _subtracted_value) returns(bool)
func (_Gauge *GaugeTransactorSession) DecreaseAllowance(_spender common.Address, _subtracted_value *big.Int) (*types.Transaction, error) {
	return _Gauge.Contract.DecreaseAllowance(&_Gauge.TransactOpts, _spender, _subtracted_value)
}

// Deposit is a paid mutator transaction binding the contract method 0xb6b55f25.
//
// Solidity: function deposit(uint256 _value) returns()
func (_Gauge *GaugeTransactor) Deposit(opts *bind.TransactOpts, _value *big.Int) (*types.Transaction, error) {
	return _Gauge.contract.Transact(opts, "deposit", _value)
}

// Deposit is a paid mutator transaction binding the contract method 0xb6b55f25.
//
// Solidity: function deposit(uint256 _value) returns()
func (_Gauge *GaugeSession) Deposit(_value *big.Int) (*types.Transaction, error) {
	return _Gauge.Contract.Deposit(&_Gauge.TransactOpts, _value)
}

// Deposit is a paid mutator transaction binding the contract method 0xb6b55f25.
//
// Solidity: function deposit(uint256 _value) returns()
func (_Gauge *GaugeTransactorSession) Deposit(_value *big.Int) (*types.Transaction, error) {
	return _Gauge.Contract.Deposit(&_Gauge.TransactOpts, _value)
}

// Deposit0 is a paid mutator transaction binding the contract method 0x6e553f65.
//
// Solidity: function deposit(uint256 _value, address _addr) returns()
func (_Gauge *GaugeTransactor) Deposit0(opts *bind.TransactOpts, _value *big.Int, _addr common.Address) (*types.Transaction, error) {
	return _Gauge.contract.Transact(opts, "deposit0", _value, _addr)
}

// Deposit0 is a paid mutator transaction binding the contract method 0x6e553f65.
//
// Solidity: function deposit(uint256 _value, address _addr) returns()
func (_Gauge *GaugeSession) Deposit0(_value *big.Int, _addr common.Address) (*types.Transaction, error) {
	return _Gauge.Contract.Deposit0(&_Gauge.TransactOpts, _value, _addr)
}

// Deposit0 is a paid mutator transaction binding the contract method 0x6e553f65.
//
// Solidity: function deposit(uint256 _value, address _addr) returns()
func (_Gauge *GaugeTransactorSession) Deposit0(_value *big.Int, _addr common.Address) (*types.Transaction, error) {
	return _Gauge.Contract.Deposit0(&_Gauge.TransactOpts, _value, _addr)
}

// Deposit1 is a paid mutator transaction binding the contract method 0x83df6747.
//
// Solidity: function deposit(uint256 _value, address _addr, bool _claim_rewards) returns()
func (_Gauge *GaugeTransactor) Deposit1(opts *bind.TransactOpts, _value *big.Int, _addr common.Address, _claim_rewards bool) (*types.Transaction, error) {
	return _Gauge.contract.Transact(opts, "deposit1", _value, _addr, _claim_rewards)
}

// Deposit1 is a paid mutator transaction binding the contract method 0x83df6747.
//
// Solidity: function deposit(uint256 _value, address _addr, bool _claim_rewards) returns()
func (_Gauge *GaugeSession) Deposit1(_value *big.Int, _addr common.Address, _claim_rewards bool) (*types.Transaction, error) {
	return _Gauge.Contract.Deposit1(&_Gauge.TransactOpts, _value, _addr, _claim_rewards)
}

// Deposit1 is a paid mutator transaction binding the contract method 0x83df6747.
//
// Solidity: function deposit(uint256 _value, address _addr, bool _claim_rewards) returns()
func (_Gauge *GaugeTransactorSession) Deposit1(_value *big.Int, _addr common.Address, _claim_rewards bool) (*types.Transaction, error) {
	return _Gauge.Contract.Deposit1(&_Gauge.TransactOpts, _value, _addr, _claim_rewards)
}

// DepositRewardToken is a paid mutator transaction binding the contract method 0x93f7aa67.
//
// Solidity: function deposit_reward_token(address _reward_token, uint256 _amount) returns()
func (_Gauge *GaugeTransactor) DepositRewardToken(opts *bind.TransactOpts, _reward_token common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Gauge.contract.Transact(opts, "deposit_reward_token", _reward_token, _amount)
}

// DepositRewardToken is a paid mutator transaction binding the contract method 0x93f7aa67.
//
// Solidity: function deposit_reward_token(address _reward_token, uint256 _amount) returns()
func (_Gauge *GaugeSession) DepositRewardToken(_reward_token common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Gauge.Contract.DepositRewardToken(&_Gauge.TransactOpts, _reward_token, _amount)
}

// DepositRewardToken is a paid mutator transaction binding the contract method 0x93f7aa67.
//
// Solidity: function deposit_reward_token(address _reward_token, uint256 _amount) returns()
func (_Gauge *GaugeTransactorSession) DepositRewardToken(_reward_token common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Gauge.Contract.DepositRewardToken(&_Gauge.TransactOpts, _reward_token, _amount)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address _spender, uint256 _added_value) returns(bool)
func (_Gauge *GaugeTransactor) IncreaseAllowance(opts *bind.TransactOpts, _spender common.Address, _added_value *big.Int) (*types.Transaction, error) {
	return _Gauge.contract.Transact(opts, "increaseAllowance", _spender, _added_value)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address _spender, uint256 _added_value) returns(bool)
func (_Gauge *GaugeSession) IncreaseAllowance(_spender common.Address, _added_value *big.Int) (*types.Transaction, error) {
	return _Gauge.Contract.IncreaseAllowance(&_Gauge.TransactOpts, _spender, _added_value)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address _spender, uint256 _added_value) returns(bool)
func (_Gauge *GaugeTransactorSession) IncreaseAllowance(_spender common.Address, _added_value *big.Int) (*types.Transaction, error) {
	return _Gauge.Contract.IncreaseAllowance(&_Gauge.TransactOpts, _spender, _added_value)
}

// Kick is a paid mutator transaction binding the contract method 0x96c55175.
//
// Solidity: function kick(address addr) returns()
func (_Gauge *GaugeTransactor) Kick(opts *bind.TransactOpts, addr common.Address) (*types.Transaction, error) {
	return _Gauge.contract.Transact(opts, "kick", addr)
}

// Kick is a paid mutator transaction binding the contract method 0x96c55175.
//
// Solidity: function kick(address addr) returns()
func (_Gauge *GaugeSession) Kick(addr common.Address) (*types.Transaction, error) {
	return _Gauge.Contract.Kick(&_Gauge.TransactOpts, addr)
}

// Kick is a paid mutator transaction binding the contract method 0x96c55175.
//
// Solidity: function kick(address addr) returns()
func (_Gauge *GaugeTransactorSession) Kick(addr common.Address) (*types.Transaction, error) {
	return _Gauge.Contract.Kick(&_Gauge.TransactOpts, addr)
}

// SetKilled is a paid mutator transaction binding the contract method 0x90b22997.
//
// Solidity: function set_killed(bool _is_killed) returns()
func (_Gauge *GaugeTransactor) SetKilled(opts *bind.TransactOpts, _is_killed bool) (*types.Transaction, error) {
	return _Gauge.contract.Transact(opts, "set_killed", _is_killed)
}

// SetKilled is a paid mutator transaction binding the contract method 0x90b22997.
//
// Solidity: function set_killed(bool _is_killed) returns()
func (_Gauge *GaugeSession) SetKilled(_is_killed bool) (*types.Transaction, error) {
	return _Gauge.Contract.SetKilled(&_Gauge.TransactOpts, _is_killed)
}

// SetKilled is a paid mutator transaction binding the contract method 0x90b22997.
//
// Solidity: function set_killed(bool _is_killed) returns()
func (_Gauge *GaugeTransactorSession) SetKilled(_is_killed bool) (*types.Transaction, error) {
	return _Gauge.Contract.SetKilled(&_Gauge.TransactOpts, _is_killed)
}

// SetRewardDistributor is a paid mutator transaction binding the contract method 0x058a3a24.
//
// Solidity: function set_reward_distributor(address _reward_token, address _distributor) returns()
func (_Gauge *GaugeTransactor) SetRewardDistributor(opts *bind.TransactOpts, _reward_token common.Address, _distributor common.Address) (*types.Transaction, error) {
	return _Gauge.contract.Transact(opts, "set_reward_distributor", _reward_token, _distributor)
}

// SetRewardDistributor is a paid mutator transaction binding the contract method 0x058a3a24.
//
// Solidity: function set_reward_distributor(address _reward_token, address _distributor) returns()
func (_Gauge *GaugeSession) SetRewardDistributor(_reward_token common.Address, _distributor common.Address) (*types.Transaction, error) {
	return _Gauge.Contract.SetRewardDistributor(&_Gauge.TransactOpts, _reward_token, _distributor)
}

// SetRewardDistributor is a paid mutator transaction binding the contract method 0x058a3a24.
//
// Solidity: function set_reward_distributor(address _reward_token, address _distributor) returns()
func (_Gauge *GaugeTransactorSession) SetRewardDistributor(_reward_token common.Address, _distributor common.Address) (*types.Transaction, error) {
	return _Gauge.Contract.SetRewardDistributor(&_Gauge.TransactOpts, _reward_token, _distributor)
}

// SetRewardsReceiver is a paid mutator transaction binding the contract method 0xbdf98116.
//
// Solidity: function set_rewards_receiver(address _receiver) returns()
func (_Gauge *GaugeTransactor) SetRewardsReceiver(opts *bind.TransactOpts, _receiver common.Address) (*types.Transaction, error) {
	return _Gauge.contract.Transact(opts, "set_rewards_receiver", _receiver)
}

// SetRewardsReceiver is a paid mutator transaction binding the contract method 0xbdf98116.
//
// Solidity: function set_rewards_receiver(address _receiver) returns()
func (_Gauge *GaugeSession) SetRewardsReceiver(_receiver common.Address) (*types.Transaction, error) {
	return _Gauge.Contract.SetRewardsReceiver(&_Gauge.TransactOpts, _receiver)
}

// SetRewardsReceiver is a paid mutator transaction binding the contract method 0xbdf98116.
//
// Solidity: function set_rewards_receiver(address _receiver) returns()
func (_Gauge *GaugeTransactorSession) SetRewardsReceiver(_receiver common.Address) (*types.Transaction, error) {
	return _Gauge.Contract.SetRewardsReceiver(&_Gauge.TransactOpts, _receiver)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address _to, uint256 _value) returns(bool)
func (_Gauge *GaugeTransactor) Transfer(opts *bind.TransactOpts, _to common.Address, _value *big.Int) (*types.Transaction, error) {
	return _Gauge.contract.Transact(opts, "transfer", _to, _value)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address _to, uint256 _value) returns(bool)
func (_Gauge *GaugeSession) Transfer(_to common.Address, _value *big.Int) (*types.Transaction, error) {
	return _Gauge.Contract.Transfer(&_Gauge.TransactOpts, _to, _value)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address _to, uint256 _value) returns(bool)
func (_Gauge *GaugeTransactorSession) Transfer(_to common.Address, _value *big.Int) (*types.Transaction, error) {
	return _Gauge.Contract.Transfer(&_Gauge.TransactOpts, _to, _value)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address _from, address _to, uint256 _value) returns(bool)
func (_Gauge *GaugeTransactor) TransferFrom(opts *bind.TransactOpts, _from common.Address, _to common.Address, _value *big.Int) (*types.Transaction, error) {
	return _Gauge.contract.Transact(opts, "transferFrom", _from, _to, _value)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address _from, address _to, uint256 _value) returns(bool)
func (_Gauge *GaugeSession) TransferFrom(_from common.Address, _to common.Address, _value *big.Int) (*types.Transaction, error) {
	return _Gauge.Contract.TransferFrom(&_Gauge.TransactOpts, _from, _to, _value)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address _from, address _to, uint256 _value) returns(bool)
func (_Gauge *GaugeTransactorSession) TransferFrom(_from common.Address, _to common.Address, _value *big.Int) (*types.Transaction, error) {
	return _Gauge.Contract.TransferFrom(&_Gauge.TransactOpts, _from, _to, _value)
}

// UserCheckpoint is a paid mutator transaction binding the contract method 0x4b820093.
//
// Solidity: function user_checkpoint(address addr) returns(bool)
func (_Gauge *GaugeTransactor) UserCheckpoint(opts *bind.TransactOpts, addr common.Address) (*types.Transaction, error) {
	return _Gauge.contract.Transact(opts, "user_checkpoint", addr)
}

// UserCheckpoint is a paid mutator transaction binding the contract method 0x4b820093.
//
// Solidity: function user_checkpoint(address addr) returns(bool)
func (_Gauge *GaugeSession) UserCheckpoint(addr common.Address) (*types.Transaction, error) {
	return _Gauge.Contract.UserCheckpoint(&_Gauge.TransactOpts, addr)
}

// UserCheckpoint is a paid mutator transaction binding the contract method 0x4b820093.
//
// Solidity: function user_checkpoint(address addr) returns(bool)
func (_Gauge *GaugeTransactorSession) UserCheckpoint(addr common.Address) (*types.Transaction, error) {
	return _Gauge.Contract.UserCheckpoint(&_Gauge.TransactOpts, addr)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 _value) returns()
func (_Gauge *GaugeTransactor) Withdraw(opts *bind.TransactOpts, _value *big.Int) (*types.Transaction, error) {
	return _Gauge.contract.Transact(opts, "withdraw", _value)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 _value) returns()
func (_Gauge *GaugeSession) Withdraw(_value *big.Int) (*types.Transaction, error) {
	return _Gauge.Contract.Withdraw(&_Gauge.TransactOpts, _value)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 _value) returns()
func (_Gauge *GaugeTransactorSession) Withdraw(_value *big.Int) (*types.Transaction, error) {
	return _Gauge.Contract.Withdraw(&_Gauge.TransactOpts, _value)
}

// Withdraw0 is a paid mutator transaction binding the contract method 0x38d07436.
//
// Solidity: function withdraw(uint256 _value, bool _claim_rewards) returns()
func (_Gauge *GaugeTransactor) Withdraw0(opts *bind.TransactOpts, _value *big.Int, _claim_rewards bool) (*types.Transaction, error) {
	return _Gauge.contract.Transact(opts, "withdraw0", _value, _claim_rewards)
}

// Withdraw0 is a paid mutator transaction binding the contract method 0x38d07436.
//
// Solidity: function withdraw(uint256 _value, bool _claim_rewards) returns()
func (_Gauge *GaugeSession) Withdraw0(_value *big.Int, _claim_rewards bool) (*types.Transaction, error) {
	return _Gauge.Contract.Withdraw0(&_Gauge.TransactOpts, _value, _claim_rewards)
}

// Withdraw0 is a paid mutator transaction binding the contract method 0x38d07436.
//
// Solidity: function withdraw(uint256 _value, bool _claim_rewards) returns()
func (_Gauge *GaugeTransactorSession) Withdraw0(_value *big.Int, _claim_rewards bool) (*types.Transaction, error) {
	return _Gauge.Contract.Withdraw0(&_Gauge.TransactOpts, _value, _claim_rewards)
}

// GaugeApplyOwnershipIterator is returned from FilterApplyOwnership and is used to iterate over the raw logs and unpacked data for ApplyOwnership events raised by the Gauge contract.
type GaugeApplyOwnershipIterator struct {
	Event *GaugeApplyOwnership // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GaugeApplyOwnershipIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GaugeApplyOwnership)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GaugeApplyOwnership)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GaugeApplyOwnershipIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GaugeApplyOwnershipIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GaugeApplyOwnership represents a ApplyOwnership event raised by the Gauge contract.
type GaugeApplyOwnership struct {
	Admin common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterApplyOwnership is a free log retrieval operation binding the contract event 0xebee2d5739011062cb4f14113f3b36bf0ffe3da5c0568f64189d1012a1189105.
//
// Solidity: event ApplyOwnership(address admin)
func (_Gauge *GaugeFilterer) FilterApplyOwnership(opts *bind.FilterOpts) (*GaugeApplyOwnershipIterator, error) {

	logs, sub, err := _Gauge.contract.FilterLogs(opts, "ApplyOwnership")
	if err != nil {
		return nil, err
	}
	return &GaugeApplyOwnershipIterator{contract: _Gauge.contract, event: "ApplyOwnership", logs: logs, sub: sub}, nil
}

// WatchApplyOwnership is a free log subscription operation binding the contract event 0xebee2d5739011062cb4f14113f3b36bf0ffe3da5c0568f64189d1012a1189105.
//
// Solidity: event ApplyOwnership(address admin)
func (_Gauge *GaugeFilterer) WatchApplyOwnership(opts *bind.WatchOpts, sink chan<- *GaugeApplyOwnership) (event.Subscription, error) {

	logs, sub, err := _Gauge.contract.WatchLogs(opts, "ApplyOwnership")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GaugeApplyOwnership)
				if err := _Gauge.contract.UnpackLog(event, "ApplyOwnership", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApplyOwnership is a log parse operation binding the contract event 0xebee2d5739011062cb4f14113f3b36bf0ffe3da5c0568f64189d1012a1189105.
//
// Solidity: event ApplyOwnership(address admin)
func (_Gauge *GaugeFilterer) ParseApplyOwnership(log types.Log) (*GaugeApplyOwnership, error) {
	event := new(GaugeApplyOwnership)
	if err := _Gauge.contract.UnpackLog(event, "ApplyOwnership", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GaugeApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the Gauge contract.
type GaugeApprovalIterator struct {
	Event *GaugeApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GaugeApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GaugeApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GaugeApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GaugeApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GaugeApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GaugeApproval represents a Approval event raised by the Gauge contract.
type GaugeApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed _owner, address indexed _spender, uint256 _value)
func (_Gauge *GaugeFilterer) FilterApproval(opts *bind.FilterOpts, _owner []common.Address, _spender []common.Address) (*GaugeApprovalIterator, error) {

	var _ownerRule []interface{}
	for _, _ownerItem := range _owner {
		_ownerRule = append(_ownerRule, _ownerItem)
	}
	var _spenderRule []interface{}
	for _, _spenderItem := range _spender {
		_spenderRule = append(_spenderRule, _spenderItem)
	}

	logs, sub, err := _Gauge.contract.FilterLogs(opts, "Approval", _ownerRule, _spenderRule)
	if err != nil {
		return nil, err
	}
	return &GaugeApprovalIterator{contract: _Gauge.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed _owner, address indexed _spender, uint256 _value)
func (_Gauge *GaugeFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *GaugeApproval, _owner []common.Address, _spender []common.Address) (event.Subscription, error) {

	var _ownerRule []interface{}
	for _, _ownerItem := range _owner {
		_ownerRule = append(_ownerRule, _ownerItem)
	}
	var _spenderRule []interface{}
	for _, _spenderItem := range _spender {
		_spenderRule = append(_spenderRule, _spenderItem)
	}

	logs, sub, err := _Gauge.contract.WatchLogs(opts, "Approval", _ownerRule, _spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GaugeApproval)
				if err := _Gauge.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed _owner, address indexed _spender, uint256 _value)
func (_Gauge *GaugeFilterer) ParseApproval(log types.Log) (*GaugeApproval, error) {
	event := new(GaugeApproval)
	if err := _Gauge.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GaugeCommitOwnershipIterator is returned from FilterCommitOwnership and is used to iterate over the raw logs and unpacked data for CommitOwnership events raised by the Gauge contract.
type GaugeCommitOwnershipIterator struct {
	Event *GaugeCommitOwnership // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GaugeCommitOwnershipIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GaugeCommitOwnership)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GaugeCommitOwnership)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GaugeCommitOwnershipIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GaugeCommitOwnershipIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GaugeCommitOwnership represents a CommitOwnership event raised by the Gauge contract.
type GaugeCommitOwnership struct {
	Admin common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterCommitOwnership is a free log retrieval operation binding the contract event 0x2f56810a6bf40af059b96d3aea4db54081f378029a518390491093a7b67032e9.
//
// Solidity: event CommitOwnership(address admin)
func (_Gauge *GaugeFilterer) FilterCommitOwnership(opts *bind.FilterOpts) (*GaugeCommitOwnershipIterator, error) {

	logs, sub, err := _Gauge.contract.FilterLogs(opts, "CommitOwnership")
	if err != nil {
		return nil, err
	}
	return &GaugeCommitOwnershipIterator{contract: _Gauge.contract, event: "CommitOwnership", logs: logs, sub: sub}, nil
}

// WatchCommitOwnership is a free log subscription operation binding the contract event 0x2f56810a6bf40af059b96d3aea4db54081f378029a518390491093a7b67032e9.
//
// Solidity: event CommitOwnership(address admin)
func (_Gauge *GaugeFilterer) WatchCommitOwnership(opts *bind.WatchOpts, sink chan<- *GaugeCommitOwnership) (event.Subscription, error) {

	logs, sub, err := _Gauge.contract.WatchLogs(opts, "CommitOwnership")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GaugeCommitOwnership)
				if err := _Gauge.contract.UnpackLog(event, "CommitOwnership", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCommitOwnership is a log parse operation binding the contract event 0x2f56810a6bf40af059b96d3aea4db54081f378029a518390491093a7b67032e9.
//
// Solidity: event CommitOwnership(address admin)
func (_Gauge *GaugeFilterer) ParseCommitOwnership(log types.Log) (*GaugeCommitOwnership, error) {
	event := new(GaugeCommitOwnership)
	if err := _Gauge.contract.UnpackLog(event, "CommitOwnership", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GaugeDepositIterator is returned from FilterDeposit and is used to iterate over the raw logs and unpacked data for Deposit events raised by the Gauge contract.
type GaugeDepositIterator struct {
	Event *GaugeDeposit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GaugeDepositIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GaugeDeposit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GaugeDeposit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GaugeDepositIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GaugeDepositIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GaugeDeposit represents a Deposit event raised by the Gauge contract.
type GaugeDeposit struct {
	Provider common.Address
	Value    *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterDeposit is a free log retrieval operation binding the contract event 0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c.
//
// Solidity: event Deposit(address indexed provider, uint256 value)
func (_Gauge *GaugeFilterer) FilterDeposit(opts *bind.FilterOpts, provider []common.Address) (*GaugeDepositIterator, error) {

	var providerRule []interface{}
	for _, providerItem := range provider {
		providerRule = append(providerRule, providerItem)
	}

	logs, sub, err := _Gauge.contract.FilterLogs(opts, "Deposit", providerRule)
	if err != nil {
		return nil, err
	}
	return &GaugeDepositIterator{contract: _Gauge.contract, event: "Deposit", logs: logs, sub: sub}, nil
}

// WatchDeposit is a free log subscription operation binding the contract event 0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c.
//
// Solidity: event Deposit(address indexed provider, uint256 value)
func (_Gauge *GaugeFilterer) WatchDeposit(opts *bind.WatchOpts, sink chan<- *GaugeDeposit, provider []common.Address) (event.Subscription, error) {

	var providerRule []interface{}
	for _, providerItem := range provider {
		providerRule = append(providerRule, providerItem)
	}

	logs, sub, err := _Gauge.contract.WatchLogs(opts, "Deposit", providerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GaugeDeposit)
				if err := _Gauge.contract.UnpackLog(event, "Deposit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeposit is a log parse operation binding the contract event 0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c.
//
// Solidity: event Deposit(address indexed provider, uint256 value)
func (_Gauge *GaugeFilterer) ParseDeposit(log types.Log) (*GaugeDeposit, error) {
	event := new(GaugeDeposit)
	if err := _Gauge.contract.UnpackLog(event, "Deposit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GaugeTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the Gauge contract.
type GaugeTransferIterator struct {
	Event *GaugeTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GaugeTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GaugeTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GaugeTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GaugeTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GaugeTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GaugeTransfer represents a Transfer event raised by the Gauge contract.
type GaugeTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed _from, address indexed _to, uint256 _value)
func (_Gauge *GaugeFilterer) FilterTransfer(opts *bind.FilterOpts, _from []common.Address, _to []common.Address) (*GaugeTransferIterator, error) {

	var _fromRule []interface{}
	for _, _fromItem := range _from {
		_fromRule = append(_fromRule, _fromItem)
	}
	var _toRule []interface{}
	for _, _toItem := range _to {
		_toRule = append(_toRule, _toItem)
	}

	logs, sub, err := _Gauge.contract.FilterLogs(opts, "Transfer", _fromRule, _toRule)
	if err != nil {
		return nil, err
	}
	return &GaugeTransferIterator{contract: _Gauge.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed _from, address indexed _to, uint256 _value)
func (_Gauge *GaugeFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *GaugeTransfer, _from []common.Address, _to []common.Address) (event.Subscription, error) {

	var _fromRule []interface{}
	for _, _fromItem := range _from {
		_fromRule = append(_fromRule, _fromItem)
	}
	var _toRule []interface{}
	for _, _toItem := range _to {
		_toRule = append(_toRule, _toItem)
	}

	logs, sub, err := _Gauge.contract.WatchLogs(opts, "Transfer", _fromRule, _toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GaugeTransfer)
				if err := _Gauge.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed _from, address indexed _to, uint256 _value)
func (_Gauge *GaugeFilterer) ParseTransfer(log types.Log) (*GaugeTransfer, error) {
	event := new(GaugeTransfer)
	if err := _Gauge.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GaugeUpdateLiquidityLimitIterator is returned from FilterUpdateLiquidityLimit and is used to iterate over the raw logs and unpacked data for UpdateLiquidityLimit events raised by the Gauge contract.
type GaugeUpdateLiquidityLimitIterator struct {
	Event *GaugeUpdateLiquidityLimit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GaugeUpdateLiquidityLimitIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GaugeUpdateLiquidityLimit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GaugeUpdateLiquidityLimit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GaugeUpdateLiquidityLimitIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GaugeUpdateLiquidityLimitIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GaugeUpdateLiquidityLimit represents a UpdateLiquidityLimit event raised by the Gauge contract.
type GaugeUpdateLiquidityLimit struct {
	User            common.Address
	OriginalBalance *big.Int
	OriginalSupply  *big.Int
	WorkingBalance  *big.Int
	WorkingSupply   *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterUpdateLiquidityLimit is a free log retrieval operation binding the contract event 0x7ecd84343f76a23d2227290e0288da3251b045541698e575a5515af4f04197a3.
//
// Solidity: event UpdateLiquidityLimit(address user, uint256 original_balance, uint256 original_supply, uint256 working_balance, uint256 working_supply)
func (_Gauge *GaugeFilterer) FilterUpdateLiquidityLimit(opts *bind.FilterOpts) (*GaugeUpdateLiquidityLimitIterator, error) {

	logs, sub, err := _Gauge.contract.FilterLogs(opts, "UpdateLiquidityLimit")
	if err != nil {
		return nil, err
	}
	return &GaugeUpdateLiquidityLimitIterator{contract: _Gauge.contract, event: "UpdateLiquidityLimit", logs: logs, sub: sub}, nil
}

// WatchUpdateLiquidityLimit is a free log subscription operation binding the contract event 0x7ecd84343f76a23d2227290e0288da3251b045541698e575a5515af4f04197a3.
//
// Solidity: event UpdateLiquidityLimit(address user, uint256 original_balance, uint256 original_supply, uint256 working_balance, uint256 working_supply)
func (_Gauge *GaugeFilterer) WatchUpdateLiquidityLimit(opts *bind.WatchOpts, sink chan<- *GaugeUpdateLiquidityLimit) (event.Subscription, error) {

	logs, sub, err := _Gauge.contract.WatchLogs(opts, "UpdateLiquidityLimit")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GaugeUpdateLiquidityLimit)
				if err := _Gauge.contract.UnpackLog(event, "UpdateLiquidityLimit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateLiquidityLimit is a log parse operation binding the contract event 0x7ecd84343f76a23d2227290e0288da3251b045541698e575a5515af4f04197a3.
//
// Solidity: event UpdateLiquidityLimit(address user, uint256 original_balance, uint256 original_supply, uint256 working_balance, uint256 working_supply)
func (_Gauge *GaugeFilterer) ParseUpdateLiquidityLimit(log types.Log) (*GaugeUpdateLiquidityLimit, error) {
	event := new(GaugeUpdateLiquidityLimit)
	if err := _Gauge.contract.UnpackLog(event, "UpdateLiquidityLimit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// GaugeWithdrawIterator is returned from FilterWithdraw and is used to iterate over the raw logs and unpacked data for Withdraw events raised by the Gauge contract.
type GaugeWithdrawIterator struct {
	Event *GaugeWithdraw // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GaugeWithdrawIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GaugeWithdraw)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GaugeWithdraw)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GaugeWithdrawIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GaugeWithdrawIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GaugeWithdraw represents a Withdraw event raised by the Gauge contract.
type GaugeWithdraw struct {
	Provider common.Address
	Value    *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterWithdraw is a free log retrieval operation binding the contract event 0x884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364.
//
// Solidity: event Withdraw(address indexed provider, uint256 value)
func (_Gauge *GaugeFilterer) FilterWithdraw(opts *bind.FilterOpts, provider []common.Address) (*GaugeWithdrawIterator, error) {

	var providerRule []interface{}
	for _, providerItem := range provider {
		providerRule = append(providerRule, providerItem)
	}

	logs, sub, err := _Gauge.contract.FilterLogs(opts, "Withdraw", providerRule)
	if err != nil {
		return nil, err
	}
	return &GaugeWithdrawIterator{contract: _Gauge.contract, event: "Withdraw", logs: logs, sub: sub}, nil
}

// WatchWithdraw is a free log subscription operation binding the contract event 0x884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364.
//
// Solidity: event Withdraw(address indexed provider, uint256 value)
func (_Gauge *GaugeFilterer) WatchWithdraw(opts *bind.WatchOpts, sink chan<- *GaugeWithdraw, provider []common.Address) (event.Subscription, error) {

	var providerRule []interface{}
	for _, providerItem := range provider {
		providerRule = append(providerRule, providerItem)
	}

	logs, sub, err := _Gauge.contract.WatchLogs(opts, "Withdraw", providerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GaugeWithdraw)
				if err := _Gauge.contract.UnpackLog(event, "Withdraw", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdraw is a log parse operation binding the contract event 0x884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364.
//
// Solidity: event Withdraw(address indexed provider, uint256 value)
func (_Gauge *GaugeFilterer) ParseWithdraw(log types.Log) (*GaugeWithdraw, error) {
	event := new(GaugeWithdraw)
	if err := _Gauge.contract.UnpackLog(event, "Withdraw", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
